using UnityEngine;
using UnityEngine.Assertions;

namespace CircularPlatformer
{
    /// <summary>
    /// Base class for tracking where the player is aiming with the
    /// current controller
    /// </summary>
    public abstract class ControllerTracker : ITracker
    {
        private IWorldCollider _mapCollider;

        private IWorldMapper _worldMapper;

        protected virtual void Start()
        {
            _mapCollider = ServiceLocator.Get<IWorldCollider>();
            _worldMapper = ServiceLocator.Get<IWorldMapper>();

            Assert.IsNotNull(_mapCollider, "There are no MapCollider registered");
            Assert.IsNotNull(_worldMapper, "There are no WorldMapper registered");
        }

        /// <summary>
        /// This provide the target ray generated by the controller
        /// </summary>
        /// <returns></returns>
        protected abstract Ray GetTargetRay();

        public Vector3 GetTrackedPosition()
        {
            var ray = GetTargetRay();
            var mapCollision = _mapCollider.RayCollisionPoint(ray);
            if (mapCollision == null)
            {
                Debug.LogWarning("For some reason the controller ray does not collide with the world");
                return Vector3.zero;
            }

            var trackedPosition = _worldMapper.ConvertPoint(mapCollision.Value);
            return trackedPosition;
        }

    }
}
